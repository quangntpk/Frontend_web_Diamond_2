import { useState, useCallback } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Mail, User, Lock, Send } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/components/ui/use-toast";
import { UserPlus } from "lucide-react";
import ReCAPTCHA from "react-google-recaptcha";
import axios from "axios";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";

export const RegisterForm = () => {
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [account, setAccount] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [recaptchaToken, setRecaptchaToken] = useState<string | null>(null);
  const [showOtpForm, setShowOtpForm] = useState(false);
  const [otp, setOtp] = useState("");
  const {
    toast
  } = useToast();
  const navigate = useNavigate();

  const handleRecaptchaChange = useCallback((value: string | null) => {
    setRecaptchaToken(value);
    console.log("reCAPTCHA value:", value);
  }, []);

  const validateForm = () => {
    if (!fullName.trim()) {
      toast({
        variant: "destructive",
        title: "L·ªói ‚ö†Ô∏è",
        description: "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
      return false;
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      toast({
        variant: "destructive",
        title: "L·ªói ‚ö†Ô∏è",
        description: "Email kh√¥ng h·ª£p l·ªá.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
      return false;
    }
    if (password.length < 8 || password.length > 40) {
      toast({
        variant: "destructive",
        title: "L·ªói ‚ö†Ô∏è",
        description: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª± v√† √≠t h∆°n 40 k√Ω t·ª±.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
      return false;
    }
    return true;
  };
  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    if (!validateForm()) {
      setIsLoading(false);
      return;
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    if (password !== confirmPassword) {
      toast({
        variant: "destructive",
        title: "M·∫≠t kh·∫©u kh√¥ng kh·ªõp",
        description: "Vui l√≤ng ki·ªÉm tra l·∫°i m·∫≠t kh·∫©u x√°c nh·∫≠n."
      });
      setIsLoading(false);
      return;
    }

    if (!recaptchaToken) {
      toast({
        variant: "destructive",
        title: "Vui l√≤ng x√°c minh reCAPTCHA ‚ö†Ô∏è",
        description: "B·∫°n c·∫ßn x√°c minh r·∫±ng b·∫°n kh√¥ng ph·∫£i l√† bot.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
      setIsLoading(false);
      return;
    }


    try {
      const response = await axios.post("http://localhost:5261/api/XacThuc/DangKy", {
        hoTen: fullName,
        email,
        taiKhoan: account,
        matKhau: password,
      });

      toast({
        title: "Vui l√≤ng ki·ªÉm tra email üéâ",
        description: "ƒê·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n c·ªßa b·∫°n",
        duration: 5000,
        className: "bg-green-500 text-white border border-green-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-green-500 hover:bg-green-100 border-green-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });

      // Hi·ªÉn th·ªã form nh·∫≠p OTP
      setShowOtpForm(true);
    } catch (error) {
      toast({
        variant: "destructive",
        title: "ƒêƒÉng k√Ω th·∫•t b·∫°i ‚ö†Ô∏è",
        description: error.response?.data?.message || "Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
    } finally {
      setIsLoading(false);
    }
  };
  const handleVerifyOtp = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const response = await axios.post("http://localhost:5261/api/XacThuc/VerifyOtpActivate", {
        email,
        otp,
      });

      toast({
        title: "K√≠ch ho·∫°t t√†i kho·∫£n th√†nh c√¥ng üéâ",
        description: response.data.message,
        duration: 5000,
        className: "bg-green-500 text-white border border-green-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-green-500 hover:bg-green-100 border-green-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });

      navigate("/auth/login ");
    } catch (error) {
      toast({
        variant: "destructive",
        title: "X√°c minh th·∫•t b·∫°i ‚ö†Ô∏è",
        description: error.response?.data?.message || "Vui l√≤ng ki·ªÉm tra l·∫°i m√£ OTP.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader className="space-y-1">
        <CardTitle className="text-2xl font-bold text-center">ƒêƒÉng k√Ω</CardTitle>
        <CardDescription className="text-center">
          T·∫°o t√†i kho·∫£n m·ªõi c·ªßa b·∫°n
        </CardDescription>
      </CardHeader>
      <CardContent>
        {!showOtpForm ? (
          <form className="space-y-4" onSubmit={handleRegister}>
            <div className="space-y-2">
              <Label htmlFor="fullName">H·ªç t√™n</Label>
              <div className="relative">
                <User className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 h-4 w-4" />
                <Input
                  id="fullName"
                  name="fullName"
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  type="text"
                  required
                  value={fullName}
                  onChange={(e) => setFullName(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <div className="relative flex items-center">
                <Mail className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 h-4 w-4" />
                <Input
                  id="email"
                  name="email"
                  placeholder="Nh·∫≠p email"
                  type="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="pl-10 pr-24"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="username">T√†i kho·∫£n</Label>
              <div className="relative">
                <User className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 h-4 w-4" />
                <Input
                  id="username"
                  name="username"
                  placeholder="Nh·∫≠p t√†i kho·∫£n"
                  type="text"
                  required
                  value={account}
                  onChange={(e) => setAccount(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="password">M·∫≠t kh·∫©u</Label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 h-4 w-4" />
                <Input
                  id="password"
                  name="password"
                  type="password"
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>


            <div className="space-y-2">
              <Label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</Label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 h-4 w-4" />
                <Input
                  id="confirmPassword"
                  name="confirmPassword"
                  type="password"
                  placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                  required
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            <div className="space-y-2">
              <ReCAPTCHA
                sitekey="6LdnYnMqAAAAAIqMXz4csz5Zw_kR3ARtWht9wjY2"
                onChange={handleRecaptchaChange}
              />
            </div>

         <Button
              type="submit"
              className="w-full bg-crocus-500 hover:bg-crocus-600"
              disabled={isLoading}
            >
              {isLoading ? (
                "ƒêang x·ª≠ l√Ω..."
              ) : (
                <>
                  <UserPlus className="mr-2 h-4 w-4" /> ƒêƒÉng k√Ω
                </>
              )}
            </Button>
          </form>
        ) : (
          <form className="space-y-4" onSubmit={handleVerifyOtp}>
            <div className="space-y-2">
              <Label htmlFor="otp">Nh·∫≠p m√£ OTP</Label>
              <Input
                id="otp"
                placeholder="Nh·∫≠p m√£ OTP t·ª´ email"
                type="text"
                value={otp}
                onChange={(e) => setOtp(e.target.value)}
                required
              />
            </div>

            <Button
              type="submit"
              className="w-full bg-crocus-500 hover:bg-crocus-600"
              disabled={isLoading}
            >
              {isLoading ? "ƒêang x·ª≠ l√Ω..." : "X√°c minh OTP"}
            </Button>
          </form>
        )}
      </CardContent>
      <CardFooter className="flex flex-col">
        <div className="text-center text-sm">
          ƒê√£ c√≥ t√†i kho·∫£n?{" "}
          <Link to="/auth/login" className="font-medium text-crocus-600 hover:text-crocus-700">
            ƒêƒÉng nh·∫≠p
          </Link>
        </div>
      </CardFooter>
    </Card>
  );
};